// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arrays) {
  return arrays.reduce((acc, current) => acc.concat(current), []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(start, test, update, body) {
  for (let value = start; test(value); value = update(value)) {
    body(value);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  // Map the array to a new array of boolean values based on the test function
  let testResults = array.map((element) => test(element));
  // Check if every element in the testResults array is true
  return testResults.every((result) => result);
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  // Initialize arrays to store characters with left-to-right and right-to-left directions
  let ltr = [];
  let rtl = [];

  // Loop through each character in the text
  for (let i = 0; i < text.length; i++) {
    // Get the script object for the current character
    let script = characterScript(text.charCodeAt(i));

    // If the character has an associated script
    if (script !== null) {
      // If the script direction is left-to-right, add it to the ltr array
      if (script.direction === "ltr") {
        ltr.push(script);
      } else {
        // Otherwise, add it to the rtl array
        rtl.push(script);
      }
    }
  }
  // Determine which direction has more characters and return the dominant direction
  if (ltr.length > rtl.length) {
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if (
  typeof process !== "undefined" &&
  typeof process.versions.node !== "undefined"
) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
}
